{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\final\\\\src\\\\Screens\\\\ResetPassword.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Sidebar from '../Components/Sidebar';\nimport ResetPasswordComponent from '../Components/ResetPasswordComponent';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const params = useParams();\n  const navigate = useNavigate();\n  const {\n    currentUser\n  } = useAuth();\n  const resetId = params.resetId;\n  useEffect(() => {\n    // Redirect if the user is already logged in\n    if (currentUser) {\n      const targetPath = currentUser.role === 'admin' ? '/admindashboard' : '/userdashboard';\n      navigate(targetPath);\n    }\n  }, [currentUser, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResetPasswordComponent, {\n      resetId: resetId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_s(ResetPassword, \"OnHPTK/NTFjItasWOpWvw1mK/m8=\", false, function () {\n  return [useParams, useNavigate, useAuth];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","Sidebar","ResetPasswordComponent","useNavigate","useParams","useAuth","useEffect","jsxDEV","_jsxDEV","ResetPassword","_s","params","navigate","currentUser","resetId","targetPath","role","style","display","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/FYP/final/src/Screens/ResetPassword.jsx"],"sourcesContent":["import React from 'react'\nimport Sidebar from '../Components/Sidebar'\nimport ResetPasswordComponent from '../Components/ResetPasswordComponent'\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useEffect } from 'react';\nconst ResetPassword = () => {\n    const params = useParams();\n    const navigate = useNavigate();\n    const { currentUser } = useAuth();\n    const resetId = params.resetId;\n\n    useEffect(() => {\n        // Redirect if the user is already logged in\n        if (currentUser) {\n            const targetPath = currentUser.role === 'admin' ? '/admindashboard' : '/userdashboard';\n            navigate(targetPath);\n        }\n    }, [currentUser, navigate]);\n    return (\n        <div style={{ display: 'flex' }}>\n            <Sidebar />\n            <ResetPasswordComponent resetId={resetId} />\n        </div>\n    )\n}\n\nexport default ResetPassword;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,sBAAsB,MAAM,sCAAsC;AACzE,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAClC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,MAAM,GAAGP,SAAS,CAAC,CAAC;EAC1B,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEU;EAAY,CAAC,GAAGR,OAAO,CAAC,CAAC;EACjC,MAAMS,OAAO,GAAGH,MAAM,CAACG,OAAO;EAE9BR,SAAS,CAAC,MAAM;IACZ;IACA,IAAIO,WAAW,EAAE;MACb,MAAME,UAAU,GAAGF,WAAW,CAACG,IAAI,KAAK,OAAO,GAAG,iBAAiB,GAAG,gBAAgB;MACtFJ,QAAQ,CAACG,UAAU,CAAC;IACxB;EACJ,CAAC,EAAE,CAACF,WAAW,EAAED,QAAQ,CAAC,CAAC;EAC3B,oBACIJ,OAAA;IAAKS,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC5BX,OAAA,CAACP,OAAO;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACXf,OAAA,CAACN,sBAAsB;MAACY,OAAO,EAAEA;IAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEd,CAAC;AAAAb,EAAA,CAnBKD,aAAa;EAAA,QACAL,SAAS,EACPD,WAAW,EACJE,OAAO;AAAA;AAAAmB,EAAA,GAH7Bf,aAAa;AAqBnB,eAAeA,aAAa;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}