{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\final\\\\src\\\\Components\\\\RoomAllocationForm.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './RoomAllocationForm.css';\n\n// const RoomAllocationForm = () => {\n//     const [email, setEmail] = useState('');\n//     const [roomType, setRoomType] = useState('');\n//     const [hostelType, setHostelType] = useState('');\n//     const [availableRooms, setAvailableRooms] = useState([]);\n//     const [selectedRoom, setSelectedRoom] = useState('');\n//     const [fromDate, setFromDate] = useState('');\n//     const [toDate, setToDate] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [errorMessage, setErrorMessage] = useState('');\n//     const [userExists, setUserExists] = useState(false);\n\n//     useEffect(() => {\n//         if (roomType && hostelType) {\n//             fetchAvailableRooms();\n//         }\n//         if (email) {\n//                         checkUserExists();\n//                     }\n//     }, [roomType, hostelType, email]);\n\n//     const checkUserExists = async () => {\n//                 try {\n//                     const response = await fetch(`http://localhost:3001/api/auth/users/exists?email=${email}`);\n//                     const data = await response.json();\n//                     setUserExists(data.exists);\n//                 } catch (error) {\n//                     console.error('Error checking user existence:', error);\n//                     setErrorMessage('An error occurred while checking user existence.');\n//                 }\n//             };\n\n// const RoomAllocationForm = () => {\n//     const [email, setEmail] = useState('');\n//     const [roomType, setRoomType] = useState('');\n//     const [hostelType, setHostelType] = useState('');\n//     const [availableRooms, setAvailableRooms] = useState([]);\n//     const [selectedRoom, setSelectedRoom] = useState('');\n//     const [fromDate, setFromDate] = useState('');\n//     const [toDate, setToDate] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [errorMessage, setErrorMessage] = useState('');\n//     const [userExists, setUserExists] = useState(false);\n\n//     useEffect(() => {\n//         if (roomType && hostelType) {\n//             fetchAvailableRooms();\n//         }\n//         if (email) {\n//             checkUserExists();\n//         }\n//     }, [roomType, hostelType, email]);\n\n//     const checkUserExists = async () => {\n//         try {\n//             const response = await fetch(`http://localhost:3001/api/auth/users/exists?email=${email}`);\n//             const data = await response.json();\n//             setUserExists(data.exists);\n//         } catch (error) {\n//             console.error('Error checking user existence:', error);\n//             setErrorMessage('An error occurred while checking user existence.');\n//         }\n//     };\n\n//     const disableHostelOption = () => {\n//         if (email && userExists) {\n//             if (hostelType === 'Boys Hostel') {\n//                 return <option value=\"Girls Hostel\" disabled>Girls Hostel</option>;\n//             } else if (hostelType === 'Girls Hostel') {\n//                 return <option value=\"Boys Hostel\" disabled>Boys Hostel</option>;\n//             }\n//         }\n//         return null;\n//     };\n\n//     const fetchAvailableRooms = async () => {\n//         setLoading(true);\n//         try {\n//             const response = await fetch(`http://localhost:3001/api/auth/occupied/available-rooms?roomType=${roomType}`);\n//             const data = await response.json();\n//             const rooms = data.availableRooms;\n//             const halfIndex = Math.floor(rooms.length / 2);\n//             const filteredRooms = hostelType === 'Boys Hostel' ? rooms.slice(0, halfIndex) : rooms.slice(halfIndex);\n//             setAvailableRooms(filteredRooms);\n//         } catch (error) {\n//             console.error('Error fetching available rooms:', error);\n//             setErrorMessage('An error occurred while fetching available rooms.');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const handleRoomAllocation = async (e) => {\n//         e.preventDefault();\n//         setLoading(true);\n//         setErrorMessage('');\n\n//         if (!userExists) {\n//             setErrorMessage('User with this email does not exist.');\n//             setLoading(false);\n//             return;\n//         }\n\n//         try {\n//             const response = await fetch('http://localhost:3001/api/auth/occupied/allocate', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n//                     email,\n//                     roomType,\n//                     selectedRoom,\n//                     fromDate,\n//                     toDate\n//                 }),\n//             });\n//             const data = await response.json();\n//             setErrorMessage(data.message);\n//         } catch (error) {\n//             console.error('Error saving room allocation:', error);\n//             setErrorMessage('An error occurred while saving the room allocation.');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"allocation-form-container\">\n//             <h2>Allocate Room</h2>\n//             <form className=\"allocation-form\" onSubmit={handleRoomAllocation}>\n//                 <input \n//                     type=\"email\" \n//                     value={email} \n//                     onChange={e => setEmail(e.target.value)} \n//                     placeholder=\"Email\" \n//                     required \n//                 />\n//                 <select \n//                     value={hostelType} \n//                     onChange={e => setHostelType(e.target.value)}\n//                     required\n//                 >\n//                     <option value=\"\">Select Hostel Type</option>\n//                     <option value=\"Boys Hostel\">Boys Hostel</option>\n//                     <option value=\"Girls Hostel\">Girls Hostel</option>\n//                     {disableHostelOption()}\n//                 </select>\n//                 {/* Rest of the form */}\n//             </form>\n//         </div>\n//     );\n// };\n\n//     const fetchAvailableRooms = async () => {\n//         setLoading(true);\n//         try {\n//             const response = await fetch(`http://localhost:3001/api/auth/occupied/available-rooms?roomType=${roomType}`);\n//             const data = await response.json();\n//             const rooms = data.availableRooms;\n//             const halfIndex = Math.floor(rooms.length / 2);\n//             const filteredRooms = hostelType === 'Boys Hostel' ? rooms.slice(0, halfIndex) : rooms.slice(halfIndex);\n//             setAvailableRooms(filteredRooms);\n//         } catch (error) {\n//             console.error('Error fetching available rooms:', error);\n//             setErrorMessage('An error occurred while fetching available rooms.');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const handleRoomAllocation = async (e) => {\n//                 e.preventDefault();\n//                 setLoading(true);\n//                 setErrorMessage('');\n\n//                 if (!userExists) {\n//                     setErrorMessage('User with this email does not exist.');\n//                     setLoading(false);\n//                     return;\n//                 }\n\n//                 try {\n//                     const response = await fetch('http://localhost:3001/api/auth/occupied/allocate', {\n//                         method: 'POST',\n//                         headers: {\n//                             'Content-Type': 'application/json',\n//                         },\n//                         body: JSON.stringify({\n//                             email,\n//                             roomType,\n//                             selectedRoom,\n//                             fromDate,\n//                             toDate\n//                         }),\n//                     });\n//                     const data = await response.json();\n//                     setErrorMessage(data.message);\n//                 } catch (error) {\n//                     console.error('Error saving room allocation:', error);\n//                     setErrorMessage('An error occurred while saving the room allocation.');\n//                 } finally {\n//                     setLoading(false);\n//                 }\n//             };\n\n//     return (\n//         <div className=\"allocation-form-container\">\n//             <h2>Allocate Room</h2>\n//             <form className=\"allocation-form\" onSubmit={handleRoomAllocation}>\n//                 <input \n//                     type=\"email\" \n//                     value={email} \n//                     onChange={e => setEmail(e.target.value)} \n//                     placeholder=\"Email\" \n//                     required \n//                 />\n//                 <select \n//                     value={hostelType} \n//                     onChange={e => setHostelType(e.target.value)} \n//                     required\n//                 >\n//                     <option value=\"\">Select Hostel Type</option>\n//                     <option value=\"Boys Hostel\">Boys Hostel</option>\n//                     <option value=\"Girls Hostel\">Girls Hostel</option>\n//                 </select>\n//                 <select \n//                     value={roomType} \n//                     onChange={e => setRoomType(e.target.value)} \n//                     required\n//                 >\n//                     <option value=\"\">Select Room Type</option>\n//                     <option value=\"single\">Single</option>\n//                     <option value=\"double\">Double</option>\n//                     <option value=\"three-seater\">Three Seater</option>\n//                 </select>\n//                 <select \n//                     value={selectedRoom} \n//                     onChange={e => setSelectedRoom(e.target.value)} \n//                     required\n//                 >\n//                     <option value=\"\">Select Room</option>\n//                     {availableRooms.map(room => (\n//                         <option key={room} value={room}>{room}</option>\n//                     ))}\n//                 </select>\n//                 <input \n//                     type=\"date\" \n//                     value={fromDate} \n//                     onChange={e => setFromDate(e.target.value)} \n//                     required \n//                 />\n//                 <input \n//                     type=\"date\" \n//                     value={toDate} \n//                     onChange={e => setToDate(e.target.value)} \n//                     required \n//                 />\n//                 <button disabled={loading}>Assign</button>\n//                 {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default RoomAllocationForm;\nimport React, { useState, useEffect } from 'react';\nimport './RoomAllocationForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomAllocationForm = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [roomType, setRoomType] = useState('');\n  const [hostelType, setHostelType] = useState('');\n  const [availableRooms, setAvailableRooms] = useState([]);\n  const [selectedRoom, setSelectedRoom] = useState('');\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [userExists, setUserExists] = useState(false);\n  const [userGender, setUserGender] = useState('');\n  useEffect(() => {\n    if (roomType && hostelType) {\n      fetchAvailableRooms();\n    }\n    if (email) {\n      checkUserExistsAndGender();\n    }\n  }, [roomType, hostelType, email]);\n  const checkUserExistsAndGender = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:3001/api/auth/user/profile/${email}`); // Assuming endpoint to fetch user details\n      const data = await response.json();\n      if (data) {\n        setUserExists(true);\n        setUserGender(data.gender);\n      } else {\n        setUserExists(false);\n        setUserGender('');\n        alert('User does not exist.');\n      }\n    } catch (error) {\n      console.error('Error checking user existence:', error);\n      setErrorMessage('An error occurred while checking user existence.');\n      alert('An error occurred while checking user existence.');\n      setUserExists(false);\n      setUserGender('');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchAvailableRooms = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:3001/api/auth/occupied/available-rooms?roomType=${roomType}`);\n      const data = await response.json();\n      const rooms = data.availableRooms;\n      const halfIndex = Math.floor(rooms.length / 2);\n      const filteredRooms = hostelType === 'Boys Hostel' ? rooms.slice(0, halfIndex) : rooms.slice(halfIndex);\n      setAvailableRooms(filteredRooms);\n    } catch (error) {\n      console.error('Error fetching available rooms:', error);\n      setErrorMessage('An error occurred while fetching available rooms.');\n      alert('An error occurred while fetching available rooms.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRoomAllocation = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setErrorMessage('');\n    if (!userExists) {\n      setErrorMessage('User with this email does not exist.');\n      alert('User with this email does not exist.');\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:3001/api/auth/occupied/allocate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          roomType,\n          selectedRoom,\n          fromDate,\n          toDate\n        })\n      });\n      const data = await response.json();\n      alert(data.message); // Alert the message from the server response\n    } catch (error) {\n      console.error('Error saving room allocation:', error);\n      setErrorMessage('An error occurred while saving the room allocation.');\n      alert('An error occurred while saving the room allocation.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"allocation-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Allocate Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"allocation-form\",\n      onSubmit: handleRoomAllocation,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        placeholder: \"Email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: hostelType,\n        onChange: e => setHostelType(e.target.value),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Hostel Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Boys Hostel\",\n          disabled: userGender === 'female',\n          children: \"Boys Hostel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Girls Hostel\",\n          disabled: userGender === 'male',\n          children: \"Girls Hostel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: roomType,\n        onChange: e => setRoomType(e.target.value),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Room Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"single\",\n          children: \"Single\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"double\",\n          children: \"Double\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"three-seater\",\n          children: \"Three Seater\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedRoom,\n        onChange: e => setSelectedRoom(e.target.value),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 21\n        }, this), availableRooms.map(room => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: room,\n          children: room\n        }, room, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: fromDate,\n        onChange: e => setFromDate(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: toDate,\n        onChange: e => setToDate(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: loading,\n        children: \"Assign\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 17\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 9\n  }, this);\n};\n_s(RoomAllocationForm, \"9wPCUctL4P9xVpF2jqJ2GZQ/xuY=\");\n_c = RoomAllocationForm;\nexport default RoomAllocationForm;\nvar _c;\n$RefreshReg$(_c, \"RoomAllocationForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RoomAllocationForm","_s","email","setEmail","roomType","setRoomType","hostelType","setHostelType","availableRooms","setAvailableRooms","selectedRoom","setSelectedRoom","fromDate","setFromDate","toDate","setToDate","loading","setLoading","errorMessage","setErrorMessage","userExists","setUserExists","userGender","setUserGender","fetchAvailableRooms","checkUserExistsAndGender","response","fetch","data","json","gender","alert","error","console","rooms","halfIndex","Math","floor","length","filteredRooms","slice","handleRoomAllocation","e","preventDefault","method","headers","body","JSON","stringify","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","disabled","map","room","_c","$RefreshReg$"],"sources":["E:/FYP/final/src/Components/RoomAllocationForm.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './RoomAllocationForm.css';\n\n// const RoomAllocationForm = () => {\n//     const [email, setEmail] = useState('');\n//     const [roomType, setRoomType] = useState('');\n//     const [hostelType, setHostelType] = useState('');\n//     const [availableRooms, setAvailableRooms] = useState([]);\n//     const [selectedRoom, setSelectedRoom] = useState('');\n//     const [fromDate, setFromDate] = useState('');\n//     const [toDate, setToDate] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [errorMessage, setErrorMessage] = useState('');\n//     const [userExists, setUserExists] = useState(false);\n    \n//     useEffect(() => {\n//         if (roomType && hostelType) {\n//             fetchAvailableRooms();\n//         }\n//         if (email) {\n//                         checkUserExists();\n//                     }\n//     }, [roomType, hostelType, email]);\n\n//     const checkUserExists = async () => {\n//                 try {\n//                     const response = await fetch(`http://localhost:3001/api/auth/users/exists?email=${email}`);\n//                     const data = await response.json();\n//                     setUserExists(data.exists);\n//                 } catch (error) {\n//                     console.error('Error checking user existence:', error);\n//                     setErrorMessage('An error occurred while checking user existence.');\n//                 }\n//             };\n\n// const RoomAllocationForm = () => {\n//     const [email, setEmail] = useState('');\n//     const [roomType, setRoomType] = useState('');\n//     const [hostelType, setHostelType] = useState('');\n//     const [availableRooms, setAvailableRooms] = useState([]);\n//     const [selectedRoom, setSelectedRoom] = useState('');\n//     const [fromDate, setFromDate] = useState('');\n//     const [toDate, setToDate] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [errorMessage, setErrorMessage] = useState('');\n//     const [userExists, setUserExists] = useState(false);\n    \n//     useEffect(() => {\n//         if (roomType && hostelType) {\n//             fetchAvailableRooms();\n//         }\n//         if (email) {\n//             checkUserExists();\n//         }\n//     }, [roomType, hostelType, email]);\n\n//     const checkUserExists = async () => {\n//         try {\n//             const response = await fetch(`http://localhost:3001/api/auth/users/exists?email=${email}`);\n//             const data = await response.json();\n//             setUserExists(data.exists);\n//         } catch (error) {\n//             console.error('Error checking user existence:', error);\n//             setErrorMessage('An error occurred while checking user existence.');\n//         }\n//     };\n\n//     const disableHostelOption = () => {\n//         if (email && userExists) {\n//             if (hostelType === 'Boys Hostel') {\n//                 return <option value=\"Girls Hostel\" disabled>Girls Hostel</option>;\n//             } else if (hostelType === 'Girls Hostel') {\n//                 return <option value=\"Boys Hostel\" disabled>Boys Hostel</option>;\n//             }\n//         }\n//         return null;\n//     };\n\n//     const fetchAvailableRooms = async () => {\n//         setLoading(true);\n//         try {\n//             const response = await fetch(`http://localhost:3001/api/auth/occupied/available-rooms?roomType=${roomType}`);\n//             const data = await response.json();\n//             const rooms = data.availableRooms;\n//             const halfIndex = Math.floor(rooms.length / 2);\n//             const filteredRooms = hostelType === 'Boys Hostel' ? rooms.slice(0, halfIndex) : rooms.slice(halfIndex);\n//             setAvailableRooms(filteredRooms);\n//         } catch (error) {\n//             console.error('Error fetching available rooms:', error);\n//             setErrorMessage('An error occurred while fetching available rooms.');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const handleRoomAllocation = async (e) => {\n//         e.preventDefault();\n//         setLoading(true);\n//         setErrorMessage('');\n\n//         if (!userExists) {\n//             setErrorMessage('User with this email does not exist.');\n//             setLoading(false);\n//             return;\n//         }\n\n//         try {\n//             const response = await fetch('http://localhost:3001/api/auth/occupied/allocate', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n//                     email,\n//                     roomType,\n//                     selectedRoom,\n//                     fromDate,\n//                     toDate\n//                 }),\n//             });\n//             const data = await response.json();\n//             setErrorMessage(data.message);\n//         } catch (error) {\n//             console.error('Error saving room allocation:', error);\n//             setErrorMessage('An error occurred while saving the room allocation.');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"allocation-form-container\">\n//             <h2>Allocate Room</h2>\n//             <form className=\"allocation-form\" onSubmit={handleRoomAllocation}>\n//                 <input \n//                     type=\"email\" \n//                     value={email} \n//                     onChange={e => setEmail(e.target.value)} \n//                     placeholder=\"Email\" \n//                     required \n//                 />\n//                 <select \n//                     value={hostelType} \n//                     onChange={e => setHostelType(e.target.value)}\n//                     required\n//                 >\n//                     <option value=\"\">Select Hostel Type</option>\n//                     <option value=\"Boys Hostel\">Boys Hostel</option>\n//                     <option value=\"Girls Hostel\">Girls Hostel</option>\n//                     {disableHostelOption()}\n//                 </select>\n//                 {/* Rest of the form */}\n//             </form>\n//         </div>\n//     );\n// };\n    \n//     const fetchAvailableRooms = async () => {\n//         setLoading(true);\n//         try {\n//             const response = await fetch(`http://localhost:3001/api/auth/occupied/available-rooms?roomType=${roomType}`);\n//             const data = await response.json();\n//             const rooms = data.availableRooms;\n//             const halfIndex = Math.floor(rooms.length / 2);\n//             const filteredRooms = hostelType === 'Boys Hostel' ? rooms.slice(0, halfIndex) : rooms.slice(halfIndex);\n//             setAvailableRooms(filteredRooms);\n//         } catch (error) {\n//             console.error('Error fetching available rooms:', error);\n//             setErrorMessage('An error occurred while fetching available rooms.');\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n   \n//     const handleRoomAllocation = async (e) => {\n//                 e.preventDefault();\n//                 setLoading(true);\n//                 setErrorMessage('');\n        \n//                 if (!userExists) {\n//                     setErrorMessage('User with this email does not exist.');\n//                     setLoading(false);\n//                     return;\n//                 }\n        \n//                 try {\n//                     const response = await fetch('http://localhost:3001/api/auth/occupied/allocate', {\n//                         method: 'POST',\n//                         headers: {\n//                             'Content-Type': 'application/json',\n//                         },\n//                         body: JSON.stringify({\n//                             email,\n//                             roomType,\n//                             selectedRoom,\n//                             fromDate,\n//                             toDate\n//                         }),\n//                     });\n//                     const data = await response.json();\n//                     setErrorMessage(data.message);\n//                 } catch (error) {\n//                     console.error('Error saving room allocation:', error);\n//                     setErrorMessage('An error occurred while saving the room allocation.');\n//                 } finally {\n//                     setLoading(false);\n//                 }\n//             };\n\n\n//     return (\n//         <div className=\"allocation-form-container\">\n//             <h2>Allocate Room</h2>\n//             <form className=\"allocation-form\" onSubmit={handleRoomAllocation}>\n//                 <input \n//                     type=\"email\" \n//                     value={email} \n//                     onChange={e => setEmail(e.target.value)} \n//                     placeholder=\"Email\" \n//                     required \n//                 />\n//                 <select \n//                     value={hostelType} \n//                     onChange={e => setHostelType(e.target.value)} \n//                     required\n//                 >\n//                     <option value=\"\">Select Hostel Type</option>\n//                     <option value=\"Boys Hostel\">Boys Hostel</option>\n//                     <option value=\"Girls Hostel\">Girls Hostel</option>\n//                 </select>\n//                 <select \n//                     value={roomType} \n//                     onChange={e => setRoomType(e.target.value)} \n//                     required\n//                 >\n//                     <option value=\"\">Select Room Type</option>\n//                     <option value=\"single\">Single</option>\n//                     <option value=\"double\">Double</option>\n//                     <option value=\"three-seater\">Three Seater</option>\n//                 </select>\n//                 <select \n//                     value={selectedRoom} \n//                     onChange={e => setSelectedRoom(e.target.value)} \n//                     required\n//                 >\n//                     <option value=\"\">Select Room</option>\n//                     {availableRooms.map(room => (\n//                         <option key={room} value={room}>{room}</option>\n//                     ))}\n//                 </select>\n//                 <input \n//                     type=\"date\" \n//                     value={fromDate} \n//                     onChange={e => setFromDate(e.target.value)} \n//                     required \n//                 />\n//                 <input \n//                     type=\"date\" \n//                     value={toDate} \n//                     onChange={e => setToDate(e.target.value)} \n//                     required \n//                 />\n//                 <button disabled={loading}>Assign</button>\n//                 {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default RoomAllocationForm;\nimport React, { useState, useEffect } from 'react';\nimport './RoomAllocationForm.css';\n\nconst RoomAllocationForm = () => {\n    const [email, setEmail] = useState('');\n    const [roomType, setRoomType] = useState('');\n    const [hostelType, setHostelType] = useState('');\n    const [availableRooms, setAvailableRooms] = useState([]);\n    const [selectedRoom, setSelectedRoom] = useState('');\n    const [fromDate, setFromDate] = useState('');\n    const [toDate, setToDate] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [userExists, setUserExists] = useState(false);\n    const [userGender, setUserGender] = useState('');\n\n    useEffect(() => {\n        if (roomType && hostelType) {\n            fetchAvailableRooms();\n        }\n        if (email) {\n            checkUserExistsAndGender();\n        }\n    }, [roomType, hostelType, email]);\n\n    const checkUserExistsAndGender = async () => {\n        setLoading(true);\n        try {\n            const response = await fetch(`http://localhost:3001/api/auth/user/profile/${email}`); // Assuming endpoint to fetch user details\n            const data = await response.json();\n            if (data) {\n                setUserExists(true);\n                setUserGender(data.gender);\n            } else {\n                setUserExists(false);\n                setUserGender('');\n                alert('User does not exist.');\n            }\n        } catch (error) {\n            console.error('Error checking user existence:', error);\n            setErrorMessage('An error occurred while checking user existence.');\n            alert('An error occurred while checking user existence.');\n            setUserExists(false);\n            setUserGender('');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchAvailableRooms = async () => {\n        setLoading(true);\n        try {\n            const response = await fetch(`http://localhost:3001/api/auth/occupied/available-rooms?roomType=${roomType}`);\n            const data = await response.json();\n            const rooms = data.availableRooms;\n            const halfIndex = Math.floor(rooms.length / 2);\n            const filteredRooms = hostelType === 'Boys Hostel' ? rooms.slice(0, halfIndex) : rooms.slice(halfIndex);\n            setAvailableRooms(filteredRooms);\n        } catch (error) {\n            console.error('Error fetching available rooms:', error);\n            setErrorMessage('An error occurred while fetching available rooms.');\n            alert('An error occurred while fetching available rooms.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleRoomAllocation = async (e) => {\n        e.preventDefault();\n        setLoading(true);\n        setErrorMessage('');\n\n        if (!userExists) {\n            setErrorMessage('User with this email does not exist.');\n            alert('User with this email does not exist.');\n            setLoading(false);\n            return;\n        }\n\n        try {\n            const response = await fetch('http://localhost:3001/api/auth/occupied/allocate', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    email,\n                    roomType,\n                    selectedRoom,\n                    fromDate,\n                    toDate\n                }),\n            });\n            const data = await response.json();\n            alert(data.message); // Alert the message from the server response\n        } catch (error) {\n            console.error('Error saving room allocation:', error);\n            setErrorMessage('An error occurred while saving the room allocation.');\n            alert('An error occurred while saving the room allocation.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"allocation-form-container\">\n            <h2>Allocate Room</h2>\n            <form className=\"allocation-form\" onSubmit={handleRoomAllocation}>\n                <input \n                    type=\"email\" \n                    value={email} \n                    onChange={e => setEmail(e.target.value)} \n                    placeholder=\"Email\" \n                    required \n                />\n                <select \n                    value={hostelType} \n                    onChange={e => setHostelType(e.target.value)} \n                    required\n                >\n                    <option value=\"\">Select Hostel Type</option>\n                    <option value=\"Boys Hostel\" disabled={userGender === 'female'}>Boys Hostel</option>\n                    <option value=\"Girls Hostel\" disabled={userGender === 'male'}>Girls Hostel</option>\n                </select>\n                <select \n                    value={roomType} \n                    onChange={e => setRoomType(e.target.value)} \n                    required\n                >\n                    <option value=\"\">Select Room Type</option>\n                    <option value=\"single\">Single</option>\n                    <option value=\"double\">Double</option>\n                    <option value=\"three-seater\">Three Seater</option>\n                </select>\n                <select \n                    value={selectedRoom} \n                    onChange={e => setSelectedRoom(e.target.value)} \n                    required\n                >\n                    <option value=\"\">Select Room</option>\n                    {availableRooms.map(room => (\n                        <option key={room} value={room}>{room}</option>\n                    ))}\n                </select>\n                <input \n                    type=\"date\" \n                    value={fromDate} \n                    onChange={e => setFromDate(e.target.value)} \n                    required \n                />\n                <input \n                    type=\"date\" \n                    value={toDate} \n                    onChange={e => setToDate(e.target.value)} \n                    required \n                />\n                <button disabled={loading}>Assign</button>\n                {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n            </form>\n        </div>\n    );\n};\n\nexport default RoomAllocationForm;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}